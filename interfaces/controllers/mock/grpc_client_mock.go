// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ezio1119/fishapp-post/pb/post (interfaces: PostServiceClient)

// Package mock_post is a generated GoMock package.
package mock_post

import (
	context "context"
	post "github.com/ezio1119/fishapp-post/pb/post"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockPostServiceClient is a mock of PostServiceClient interface
type MockPostServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceClientMockRecorder
}

// MockPostServiceClientMockRecorder is the mock recorder for MockPostServiceClient
type MockPostServiceClientMockRecorder struct {
	mock *MockPostServiceClient
}

// NewMockPostServiceClient creates a new mock instance
func NewMockPostServiceClient(ctrl *gomock.Controller) *MockPostServiceClient {
	mock := &MockPostServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostServiceClient) EXPECT() *MockPostServiceClientMockRecorder {
	return m.recorder
}

// BatchGetApplyPostsByPostIDs mocks base method
func (m *MockPostServiceClient) BatchGetApplyPostsByPostIDs(arg0 context.Context, arg1 *post.BatchGetApplyPostsByPostIDsReq, arg2 ...grpc.CallOption) (*post.BatchGetApplyPostsByPostIDsRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetApplyPostsByPostIDs", varargs...)
	ret0, _ := ret[0].(*post.BatchGetApplyPostsByPostIDsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetApplyPostsByPostIDs indicates an expected call of BatchGetApplyPostsByPostIDs
func (mr *MockPostServiceClientMockRecorder) BatchGetApplyPostsByPostIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetApplyPostsByPostIDs", reflect.TypeOf((*MockPostServiceClient)(nil).BatchGetApplyPostsByPostIDs), varargs...)
}

// CreateApplyPost mocks base method
func (m *MockPostServiceClient) CreateApplyPost(arg0 context.Context, arg1 *post.CreateApplyPostReq, arg2 ...grpc.CallOption) (*post.ApplyPost, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplyPost", varargs...)
	ret0, _ := ret[0].(*post.ApplyPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplyPost indicates an expected call of CreateApplyPost
func (mr *MockPostServiceClientMockRecorder) CreateApplyPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplyPost", reflect.TypeOf((*MockPostServiceClient)(nil).CreateApplyPost), varargs...)
}

// CreatePost mocks base method
func (m *MockPostServiceClient) CreatePost(arg0 context.Context, arg1 ...grpc.CallOption) (post.PostService_CreatePostClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(post.PostService_CreatePostClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockPostServiceClientMockRecorder) CreatePost(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostServiceClient)(nil).CreatePost), varargs...)
}

// DeleteApplyPost mocks base method
func (m *MockPostServiceClient) DeleteApplyPost(arg0 context.Context, arg1 *post.DeleteApplyPostReq, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplyPost", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplyPost indicates an expected call of DeleteApplyPost
func (mr *MockPostServiceClientMockRecorder) DeleteApplyPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplyPost", reflect.TypeOf((*MockPostServiceClient)(nil).DeleteApplyPost), varargs...)
}

// DeletePost mocks base method
func (m *MockPostServiceClient) DeletePost(arg0 context.Context, arg1 *post.DeletePostReq, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockPostServiceClientMockRecorder) DeletePost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServiceClient)(nil).DeletePost), varargs...)
}

// GetApplyPost mocks base method
func (m *MockPostServiceClient) GetApplyPost(arg0 context.Context, arg1 *post.GetApplyPostReq, arg2 ...grpc.CallOption) (*post.ApplyPost, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplyPost", varargs...)
	ret0, _ := ret[0].(*post.ApplyPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplyPost indicates an expected call of GetApplyPost
func (mr *MockPostServiceClientMockRecorder) GetApplyPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplyPost", reflect.TypeOf((*MockPostServiceClient)(nil).GetApplyPost), varargs...)
}

// GetPost mocks base method
func (m *MockPostServiceClient) GetPost(arg0 context.Context, arg1 *post.GetPostReq, arg2 ...grpc.CallOption) (*post.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPost", varargs...)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockPostServiceClientMockRecorder) GetPost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostServiceClient)(nil).GetPost), varargs...)
}

// ListApplyPosts mocks base method
func (m *MockPostServiceClient) ListApplyPosts(arg0 context.Context, arg1 *post.ListApplyPostsReq, arg2 ...grpc.CallOption) (*post.ListApplyPostsRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplyPosts", varargs...)
	ret0, _ := ret[0].(*post.ListApplyPostsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplyPosts indicates an expected call of ListApplyPosts
func (mr *MockPostServiceClientMockRecorder) ListApplyPosts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplyPosts", reflect.TypeOf((*MockPostServiceClient)(nil).ListApplyPosts), varargs...)
}

// ListPosts mocks base method
func (m *MockPostServiceClient) ListPosts(arg0 context.Context, arg1 *post.ListPostsReq, arg2 ...grpc.CallOption) (*post.ListPostsRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPosts", varargs...)
	ret0, _ := ret[0].(*post.ListPostsRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts
func (mr *MockPostServiceClientMockRecorder) ListPosts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockPostServiceClient)(nil).ListPosts), varargs...)
}

// UpdatePost mocks base method
func (m *MockPostServiceClient) UpdatePost(arg0 context.Context, arg1 *post.UpdatePostReq, arg2 ...grpc.CallOption) (*post.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockPostServiceClientMockRecorder) UpdatePost(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServiceClient)(nil).UpdatePost), varargs...)
}
