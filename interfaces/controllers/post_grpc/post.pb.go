// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.2
// source: post.proto

package post_grpc

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListPostsReq_Filter_OrderBy int32

const (
	ListPostsReq_Filter_DESC ListPostsReq_Filter_OrderBy = 0 // デフォルト
	ListPostsReq_Filter_ASC  ListPostsReq_Filter_OrderBy = 1
)

// Enum value maps for ListPostsReq_Filter_OrderBy.
var (
	ListPostsReq_Filter_OrderBy_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListPostsReq_Filter_OrderBy_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListPostsReq_Filter_OrderBy) Enum() *ListPostsReq_Filter_OrderBy {
	p := new(ListPostsReq_Filter_OrderBy)
	*p = x
	return p
}

func (x ListPostsReq_Filter_OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListPostsReq_Filter_OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_post_proto_enumTypes[0].Descriptor()
}

func (ListPostsReq_Filter_OrderBy) Type() protoreflect.EnumType {
	return &file_post_proto_enumTypes[0]
}

func (x ListPostsReq_Filter_OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListPostsReq_Filter_OrderBy.Descriptor instead.
func (ListPostsReq_Filter_OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{3, 0, 0}
}

type ListPostsReq_Filter_SortBy int32

const (
	ListPostsReq_Filter_CREATED_AT ListPostsReq_Filter_SortBy = 0 // デフォルト
	ListPostsReq_Filter_MEETING_AT ListPostsReq_Filter_SortBy = 1
)

// Enum value maps for ListPostsReq_Filter_SortBy.
var (
	ListPostsReq_Filter_SortBy_name = map[int32]string{
		0: "CREATED_AT",
		1: "MEETING_AT",
	}
	ListPostsReq_Filter_SortBy_value = map[string]int32{
		"CREATED_AT": 0,
		"MEETING_AT": 1,
	}
)

func (x ListPostsReq_Filter_SortBy) Enum() *ListPostsReq_Filter_SortBy {
	p := new(ListPostsReq_Filter_SortBy)
	*p = x
	return p
}

func (x ListPostsReq_Filter_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListPostsReq_Filter_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_post_proto_enumTypes[1].Descriptor()
}

func (ListPostsReq_Filter_SortBy) Type() protoreflect.EnumType {
	return &file_post_proto_enumTypes[1]
}

func (x ListPostsReq_Filter_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListPostsReq_Filter_SortBy.Descriptor instead.
func (ListPostsReq_Filter_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{3, 0, 1}
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title             string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content           string               `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	FishingSpotTypeId int64                `protobuf:"varint,4,opt,name=fishing_spot_type_id,json=fishingSpotTypeId,proto3" json:"fishing_spot_type_id,omitempty"`
	FishTypeIds       []int64              `protobuf:"varint,5,rep,packed,name=fish_type_ids,json=fishTypeIds,proto3" json:"fish_type_ids,omitempty"`
	PrefectureId      int64                `protobuf:"varint,6,opt,name=prefecture_id,json=prefectureId,proto3" json:"prefecture_id,omitempty"`
	MeetingPlaceId    string               `protobuf:"bytes,7,opt,name=meeting_place_id,json=meetingPlaceId,proto3" json:"meeting_place_id,omitempty"`
	MeetingAt         *timestamp.Timestamp `protobuf:"bytes,8,opt,name=meeting_at,json=meetingAt,proto3" json:"meeting_at,omitempty"`
	UserId            int64                `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MaxApply          int64                `protobuf:"varint,10,opt,name=max_apply,json=maxApply,proto3" json:"max_apply,omitempty"`
	CreatedAt         *timestamp.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamp.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{0}
}

func (x *Post) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Post) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Post) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Post) GetFishingSpotTypeId() int64 {
	if x != nil {
		return x.FishingSpotTypeId
	}
	return 0
}

func (x *Post) GetFishTypeIds() []int64 {
	if x != nil {
		return x.FishTypeIds
	}
	return nil
}

func (x *Post) GetPrefectureId() int64 {
	if x != nil {
		return x.PrefectureId
	}
	return 0
}

func (x *Post) GetMeetingPlaceId() string {
	if x != nil {
		return x.MeetingPlaceId
	}
	return ""
}

func (x *Post) GetMeetingAt() *timestamp.Timestamp {
	if x != nil {
		return x.MeetingAt
	}
	return nil
}

func (x *Post) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Post) GetMaxApply() int64 {
	if x != nil {
		return x.MaxApply
	}
	return 0
}

func (x *Post) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Post) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ApplyPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PostId    int64                `protobuf:"varint,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	UserId    int64                `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ApplyPost) Reset() {
	*x = ApplyPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyPost) ProtoMessage() {}

func (x *ApplyPost) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyPost.ProtoReflect.Descriptor instead.
func (*ApplyPost) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyPost) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApplyPost) GetPostId() int64 {
	if x != nil {
		return x.PostId
	}
	return 0
}

func (x *ApplyPost) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ApplyPost) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ApplyPost) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetPostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPostReq) Reset() {
	*x = GetPostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostReq) ProtoMessage() {}

func (x *GetPostReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostReq.ProtoReflect.Descriptor instead.
func (*GetPostReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{2}
}

func (x *GetPostReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListPostsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    *ListPostsReq_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize  int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 30件以下。ゼロ値の場合、デフォルト設定で10件
	PageToken string               `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPostsReq) Reset() {
	*x = ListPostsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPostsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPostsReq) ProtoMessage() {}

func (x *ListPostsReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPostsReq.ProtoReflect.Descriptor instead.
func (*ListPostsReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{3}
}

func (x *ListPostsReq) GetFilter() *ListPostsReq_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListPostsReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPostsReq) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPostsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Posts         []*Post `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
	NextPageToken string  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPostsRes) Reset() {
	*x = ListPostsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPostsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPostsRes) ProtoMessage() {}

func (x *ListPostsRes) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPostsRes.ProtoReflect.Descriptor instead.
func (*ListPostsRes) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{4}
}

func (x *ListPostsRes) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

func (x *ListPostsRes) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreatePostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title             string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                                       // 20文字以下
	Content           string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                                   // 2000文字以下
	FishingSpotTypeId int64                `protobuf:"varint,3,opt,name=fishing_spot_type_id,json=fishingSpotTypeId,proto3" json:"fishing_spot_type_id,omitempty"` // 1~4
	FishTypeIds       []int64              `protobuf:"varint,4,rep,packed,name=fish_type_ids,json=fishTypeIds,proto3" json:"fish_type_ids,omitempty"`              // 1~95 一個以上 ユニーク
	PrefectureId      int64                `protobuf:"varint,5,opt,name=prefecture_id,json=prefectureId,proto3" json:"prefecture_id,omitempty"`                    // 1~47
	MeetingPlaceId    string               `protobuf:"bytes,6,opt,name=meeting_place_id,json=meetingPlaceId,proto3" json:"meeting_place_id,omitempty"`             // google place ID, いまはサーバー側では叩かず保存して返すだけ。後々API叩く。
	MeetingAt         *timestamp.Timestamp `protobuf:"bytes,7,opt,name=meeting_at,json=meetingAt,proto3" json:"meeting_at,omitempty"`
	MaxApply          int64                `protobuf:"varint,8,opt,name=max_apply,json=maxApply,proto3" json:"max_apply,omitempty"`
	UserId            int64                `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreatePostReq) Reset() {
	*x = CreatePostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePostReq) ProtoMessage() {}

func (x *CreatePostReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePostReq.ProtoReflect.Descriptor instead.
func (*CreatePostReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePostReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePostReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreatePostReq) GetFishingSpotTypeId() int64 {
	if x != nil {
		return x.FishingSpotTypeId
	}
	return 0
}

func (x *CreatePostReq) GetFishTypeIds() []int64 {
	if x != nil {
		return x.FishTypeIds
	}
	return nil
}

func (x *CreatePostReq) GetPrefectureId() int64 {
	if x != nil {
		return x.PrefectureId
	}
	return 0
}

func (x *CreatePostReq) GetMeetingPlaceId() string {
	if x != nil {
		return x.MeetingPlaceId
	}
	return ""
}

func (x *CreatePostReq) GetMeetingAt() *timestamp.Timestamp {
	if x != nil {
		return x.MeetingAt
	}
	return nil
}

func (x *CreatePostReq) GetMaxApply() int64 {
	if x != nil {
		return x.MaxApply
	}
	return 0
}

func (x *CreatePostReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UpdatePostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title             string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content           string               `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	FishingSpotTypeId int64                `protobuf:"varint,4,opt,name=fishing_spot_type_id,json=fishingSpotTypeId,proto3" json:"fishing_spot_type_id,omitempty"`
	FishTypeIds       []int64              `protobuf:"varint,5,rep,packed,name=fish_type_ids,json=fishTypeIds,proto3" json:"fish_type_ids,omitempty"`
	PrefectureId      int64                `protobuf:"varint,6,opt,name=prefecture_id,json=prefectureId,proto3" json:"prefecture_id,omitempty"`
	MeetingPlaceId    string               `protobuf:"bytes,7,opt,name=meeting_place_id,json=meetingPlaceId,proto3" json:"meeting_place_id,omitempty"`
	MeetingAt         *timestamp.Timestamp `protobuf:"bytes,8,opt,name=meeting_at,json=meetingAt,proto3" json:"meeting_at,omitempty"`
	MaxApply          int64                `protobuf:"varint,9,opt,name=max_apply,json=maxApply,proto3" json:"max_apply,omitempty"`
}

func (x *UpdatePostReq) Reset() {
	*x = UpdatePostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostReq) ProtoMessage() {}

func (x *UpdatePostReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostReq.ProtoReflect.Descriptor instead.
func (*UpdatePostReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePostReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePostReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdatePostReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdatePostReq) GetFishingSpotTypeId() int64 {
	if x != nil {
		return x.FishingSpotTypeId
	}
	return 0
}

func (x *UpdatePostReq) GetFishTypeIds() []int64 {
	if x != nil {
		return x.FishTypeIds
	}
	return nil
}

func (x *UpdatePostReq) GetPrefectureId() int64 {
	if x != nil {
		return x.PrefectureId
	}
	return 0
}

func (x *UpdatePostReq) GetMeetingPlaceId() string {
	if x != nil {
		return x.MeetingPlaceId
	}
	return ""
}

func (x *UpdatePostReq) GetMeetingAt() *timestamp.Timestamp {
	if x != nil {
		return x.MeetingAt
	}
	return nil
}

func (x *UpdatePostReq) GetMaxApply() int64 {
	if x != nil {
		return x.MaxApply
	}
	return 0
}

type DeletePostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePostReq) Reset() {
	*x = DeletePostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePostReq) ProtoMessage() {}

func (x *DeletePostReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePostReq.ProtoReflect.Descriptor instead.
func (*DeletePostReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePostReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeletePostRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeletePostRes) Reset() {
	*x = DeletePostRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePostRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePostRes) ProtoMessage() {}

func (x *DeletePostRes) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePostRes.ProtoReflect.Descriptor instead.
func (*DeletePostRes) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePostRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetApplyPostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetApplyPostReq) Reset() {
	*x = GetApplyPostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplyPostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplyPostReq) ProtoMessage() {}

func (x *GetApplyPostReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplyPostReq.ProtoReflect.Descriptor instead.
func (*GetApplyPostReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{9}
}

func (x *GetApplyPostReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListApplyPostsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *ListApplyPostsReq_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListApplyPostsReq) Reset() {
	*x = ListApplyPostsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplyPostsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplyPostsReq) ProtoMessage() {}

func (x *ListApplyPostsReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplyPostsReq.ProtoReflect.Descriptor instead.
func (*ListApplyPostsReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{10}
}

func (x *ListApplyPostsReq) GetFilter() *ListApplyPostsReq_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListApplyPostsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyPosts []*ApplyPost `protobuf:"bytes,1,rep,name=apply_posts,json=applyPosts,proto3" json:"apply_posts,omitempty"`
}

func (x *ListApplyPostsRes) Reset() {
	*x = ListApplyPostsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplyPostsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplyPostsRes) ProtoMessage() {}

func (x *ListApplyPostsRes) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplyPostsRes.ProtoReflect.Descriptor instead.
func (*ListApplyPostsRes) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{11}
}

func (x *ListApplyPostsRes) GetApplyPosts() []*ApplyPost {
	if x != nil {
		return x.ApplyPosts
	}
	return nil
}

type BatchGetApplyPostsByPostIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostIds []int64 `protobuf:"varint,1,rep,packed,name=post_ids,json=postIds,proto3" json:"post_ids,omitempty"`
}

func (x *BatchGetApplyPostsByPostIDsReq) Reset() {
	*x = BatchGetApplyPostsByPostIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetApplyPostsByPostIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetApplyPostsByPostIDsReq) ProtoMessage() {}

func (x *BatchGetApplyPostsByPostIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetApplyPostsByPostIDsReq.ProtoReflect.Descriptor instead.
func (*BatchGetApplyPostsByPostIDsReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{12}
}

func (x *BatchGetApplyPostsByPostIDsReq) GetPostIds() []int64 {
	if x != nil {
		return x.PostIds
	}
	return nil
}

type BatchGetApplyPostsByPostIDsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyPosts []*ApplyPost `protobuf:"bytes,1,rep,name=apply_posts,json=applyPosts,proto3" json:"apply_posts,omitempty"`
}

func (x *BatchGetApplyPostsByPostIDsRes) Reset() {
	*x = BatchGetApplyPostsByPostIDsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetApplyPostsByPostIDsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetApplyPostsByPostIDsRes) ProtoMessage() {}

func (x *BatchGetApplyPostsByPostIDsRes) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetApplyPostsByPostIDsRes.ProtoReflect.Descriptor instead.
func (*BatchGetApplyPostsByPostIDsRes) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{13}
}

func (x *BatchGetApplyPostsByPostIDsRes) GetApplyPosts() []*ApplyPost {
	if x != nil {
		return x.ApplyPosts
	}
	return nil
}

type CreateApplyPostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId int64 `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateApplyPostReq) Reset() {
	*x = CreateApplyPostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplyPostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplyPostReq) ProtoMessage() {}

func (x *CreateApplyPostReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplyPostReq.ProtoReflect.Descriptor instead.
func (*CreateApplyPostReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{14}
}

func (x *CreateApplyPostReq) GetPostId() int64 {
	if x != nil {
		return x.PostId
	}
	return 0
}

func (x *CreateApplyPostReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DeleteApplyPostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteApplyPostReq) Reset() {
	*x = DeleteApplyPostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplyPostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplyPostReq) ProtoMessage() {}

func (x *DeleteApplyPostReq) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplyPostReq.ProtoReflect.Descriptor instead.
func (*DeleteApplyPostReq) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteApplyPostReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListPostsReq_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefectureId      int64                       `protobuf:"varint,1,opt,name=prefecture_id,json=prefectureId,proto3" json:"prefecture_id,omitempty"`                    // フロントでenum管理 都道府県コード
	FishingSpotTypeId int64                       `protobuf:"varint,2,opt,name=fishing_spot_type_id,json=fishingSpotTypeId,proto3" json:"fishing_spot_type_id,omitempty"` // フロントでenum管理 1: 陸っぱり, 2: 渓流釣り, 3: 釣り船, 4: 釣り堀
	FishTypeIds       []int64                     `protobuf:"varint,3,rep,packed,name=fish_type_ids,json=fishTypeIds,proto3" json:"fish_type_ids,omitempty"`              // フロントでenum管理
	MeetingAtFrom     *timestamp.Timestamp        `protobuf:"bytes,4,opt,name=meeting_at_from,json=meetingAtFrom,proto3" json:"meeting_at_from,omitempty"`                // fromとtoはセットで必要 エラーは出ないけどクエリは無効になる
	MeetingAtTo       *timestamp.Timestamp        `protobuf:"bytes,5,opt,name=meeting_at_to,json=meetingAtTo,proto3" json:"meeting_at_to,omitempty"`
	CanApply          bool                        `protobuf:"varint,6,opt,name=can_apply,json=canApply,proto3" json:"can_apply,omitempty"` // trueにすると、応募可能な投稿のみを絞り込める。
	OrderBy           ListPostsReq_Filter_OrderBy `protobuf:"varint,7,opt,name=order_by,json=orderBy,proto3,enum=post_grpc.ListPostsReq_Filter_OrderBy" json:"order_by,omitempty"`
	SortBy            ListPostsReq_Filter_SortBy  `protobuf:"varint,8,opt,name=sort_by,json=sortBy,proto3,enum=post_grpc.ListPostsReq_Filter_SortBy" json:"sort_by,omitempty"`
	UserId            int64                       `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // ここに値が入っているとユーザーの投稿を絞り込める
}

func (x *ListPostsReq_Filter) Reset() {
	*x = ListPostsReq_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPostsReq_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPostsReq_Filter) ProtoMessage() {}

func (x *ListPostsReq_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPostsReq_Filter.ProtoReflect.Descriptor instead.
func (*ListPostsReq_Filter) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListPostsReq_Filter) GetPrefectureId() int64 {
	if x != nil {
		return x.PrefectureId
	}
	return 0
}

func (x *ListPostsReq_Filter) GetFishingSpotTypeId() int64 {
	if x != nil {
		return x.FishingSpotTypeId
	}
	return 0
}

func (x *ListPostsReq_Filter) GetFishTypeIds() []int64 {
	if x != nil {
		return x.FishTypeIds
	}
	return nil
}

func (x *ListPostsReq_Filter) GetMeetingAtFrom() *timestamp.Timestamp {
	if x != nil {
		return x.MeetingAtFrom
	}
	return nil
}

func (x *ListPostsReq_Filter) GetMeetingAtTo() *timestamp.Timestamp {
	if x != nil {
		return x.MeetingAtTo
	}
	return nil
}

func (x *ListPostsReq_Filter) GetCanApply() bool {
	if x != nil {
		return x.CanApply
	}
	return false
}

func (x *ListPostsReq_Filter) GetOrderBy() ListPostsReq_Filter_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return ListPostsReq_Filter_DESC
}

func (x *ListPostsReq_Filter) GetSortBy() ListPostsReq_Filter_SortBy {
	if x != nil {
		return x.SortBy
	}
	return ListPostsReq_Filter_CREATED_AT
}

func (x *ListPostsReq_Filter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListApplyPostsReq_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PostId int64 `protobuf:"varint,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (x *ListApplyPostsReq_Filter) Reset() {
	*x = ListApplyPostsReq_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_post_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplyPostsReq_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplyPostsReq_Filter) ProtoMessage() {}

func (x *ListApplyPostsReq_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_post_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplyPostsReq_Filter.ProtoReflect.Descriptor instead.
func (*ListApplyPostsReq_Filter) Descriptor() ([]byte, []int) {
	return file_post_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListApplyPostsReq_Filter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListApplyPostsReq_Filter) GetPostId() int64 {
	if x != nil {
		return x.PostId
	}
	return 0
}

var File_post_proto protoreflect.FileDescriptor

var file_post_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1,
	0x03, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x70,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x25, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xe3, 0x05, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x18, 0x1e, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xcb, 0x04, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x18, 0x2f, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x14, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x18, 0x04, 0x52, 0x11, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x42, 0x1c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x22, 0x04, 0x22, 0x02, 0x18, 0x5f, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52,
	0x0b, 0x66, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x0f,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x5f, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x54, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1c, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0x28, 0x0a, 0x06, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x41, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x54, 0x10, 0x01, 0x22, 0x5d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbd, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xd0, 0x0f, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x14, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x22, 0x04, 0x18, 0x04, 0x28, 0x01, 0x52, 0x11, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x66, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x42, 0x12, 0xfa, 0x42, 0x0f, 0x92, 0x01, 0x0c, 0x08, 0x01, 0x18, 0x01, 0x22, 0x06, 0x22, 0x04,
	0x18, 0x5f, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x22, 0x04, 0x18,
	0x2f, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x10, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x1b, 0x18, 0xff, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x40,
	0x01, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xb4, 0x03, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xd0, 0x0f, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x14, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x22, 0x04, 0x18, 0x04, 0x28, 0x01, 0x52,
	0x11, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x92, 0x01,
	0x0c, 0x08, 0x01, 0x18, 0x01, 0x22, 0x06, 0x22, 0x04, 0x18, 0x5f, 0x28, 0x01, 0x52, 0x0b, 0x66,
	0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x22, 0x04, 0x18, 0x2f, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x10, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x1b, 0x18, 0xff, 0x01,
	0x52, 0x0e, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x2a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8c, 0x01, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x3a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x10, 0xfa, 0x42, 0x0d,
	0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x07, 0x70,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x6f,
	0x73, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x22,
	0x58, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52,
	0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28,
	0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x32, 0xc8, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x18, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x1c, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x1b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73,
	0x74, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x74,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_post_proto_rawDescOnce sync.Once
	file_post_proto_rawDescData = file_post_proto_rawDesc
)

func file_post_proto_rawDescGZIP() []byte {
	file_post_proto_rawDescOnce.Do(func() {
		file_post_proto_rawDescData = protoimpl.X.CompressGZIP(file_post_proto_rawDescData)
	})
	return file_post_proto_rawDescData
}

var file_post_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_post_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_post_proto_goTypes = []interface{}{
	(ListPostsReq_Filter_OrderBy)(0),       // 0: post_grpc.ListPostsReq.Filter.OrderBy
	(ListPostsReq_Filter_SortBy)(0),        // 1: post_grpc.ListPostsReq.Filter.SortBy
	(*Post)(nil),                           // 2: post_grpc.Post
	(*ApplyPost)(nil),                      // 3: post_grpc.ApplyPost
	(*GetPostReq)(nil),                     // 4: post_grpc.GetPostReq
	(*ListPostsReq)(nil),                   // 5: post_grpc.ListPostsReq
	(*ListPostsRes)(nil),                   // 6: post_grpc.ListPostsRes
	(*CreatePostReq)(nil),                  // 7: post_grpc.CreatePostReq
	(*UpdatePostReq)(nil),                  // 8: post_grpc.UpdatePostReq
	(*DeletePostReq)(nil),                  // 9: post_grpc.DeletePostReq
	(*DeletePostRes)(nil),                  // 10: post_grpc.DeletePostRes
	(*GetApplyPostReq)(nil),                // 11: post_grpc.GetApplyPostReq
	(*ListApplyPostsReq)(nil),              // 12: post_grpc.ListApplyPostsReq
	(*ListApplyPostsRes)(nil),              // 13: post_grpc.ListApplyPostsRes
	(*BatchGetApplyPostsByPostIDsReq)(nil), // 14: post_grpc.BatchGetApplyPostsByPostIDsReq
	(*BatchGetApplyPostsByPostIDsRes)(nil), // 15: post_grpc.BatchGetApplyPostsByPostIDsRes
	(*CreateApplyPostReq)(nil),             // 16: post_grpc.CreateApplyPostReq
	(*DeleteApplyPostReq)(nil),             // 17: post_grpc.DeleteApplyPostReq
	(*ListPostsReq_Filter)(nil),            // 18: post_grpc.ListPostsReq.Filter
	(*ListApplyPostsReq_Filter)(nil),       // 19: post_grpc.ListApplyPostsReq.Filter
	(*timestamp.Timestamp)(nil),            // 20: google.protobuf.Timestamp
	(*empty.Empty)(nil),                    // 21: google.protobuf.Empty
}
var file_post_proto_depIdxs = []int32{
	20, // 0: post_grpc.Post.meeting_at:type_name -> google.protobuf.Timestamp
	20, // 1: post_grpc.Post.created_at:type_name -> google.protobuf.Timestamp
	20, // 2: post_grpc.Post.updated_at:type_name -> google.protobuf.Timestamp
	20, // 3: post_grpc.ApplyPost.created_at:type_name -> google.protobuf.Timestamp
	20, // 4: post_grpc.ApplyPost.updated_at:type_name -> google.protobuf.Timestamp
	18, // 5: post_grpc.ListPostsReq.filter:type_name -> post_grpc.ListPostsReq.Filter
	2,  // 6: post_grpc.ListPostsRes.posts:type_name -> post_grpc.Post
	20, // 7: post_grpc.CreatePostReq.meeting_at:type_name -> google.protobuf.Timestamp
	20, // 8: post_grpc.UpdatePostReq.meeting_at:type_name -> google.protobuf.Timestamp
	19, // 9: post_grpc.ListApplyPostsReq.filter:type_name -> post_grpc.ListApplyPostsReq.Filter
	3,  // 10: post_grpc.ListApplyPostsRes.apply_posts:type_name -> post_grpc.ApplyPost
	3,  // 11: post_grpc.BatchGetApplyPostsByPostIDsRes.apply_posts:type_name -> post_grpc.ApplyPost
	20, // 12: post_grpc.ListPostsReq.Filter.meeting_at_from:type_name -> google.protobuf.Timestamp
	20, // 13: post_grpc.ListPostsReq.Filter.meeting_at_to:type_name -> google.protobuf.Timestamp
	0,  // 14: post_grpc.ListPostsReq.Filter.order_by:type_name -> post_grpc.ListPostsReq.Filter.OrderBy
	1,  // 15: post_grpc.ListPostsReq.Filter.sort_by:type_name -> post_grpc.ListPostsReq.Filter.SortBy
	4,  // 16: post_grpc.PostService.GetPost:input_type -> post_grpc.GetPostReq
	5,  // 17: post_grpc.PostService.ListPosts:input_type -> post_grpc.ListPostsReq
	7,  // 18: post_grpc.PostService.CreatePost:input_type -> post_grpc.CreatePostReq
	8,  // 19: post_grpc.PostService.UpdatePost:input_type -> post_grpc.UpdatePostReq
	9,  // 20: post_grpc.PostService.DeletePost:input_type -> post_grpc.DeletePostReq
	11, // 21: post_grpc.PostService.GetApplyPost:input_type -> post_grpc.GetApplyPostReq
	12, // 22: post_grpc.PostService.ListApplyPosts:input_type -> post_grpc.ListApplyPostsReq
	14, // 23: post_grpc.PostService.BatchGetApplyPostsByPostIDs:input_type -> post_grpc.BatchGetApplyPostsByPostIDsReq
	16, // 24: post_grpc.PostService.CreateApplyPost:input_type -> post_grpc.CreateApplyPostReq
	17, // 25: post_grpc.PostService.DeleteApplyPost:input_type -> post_grpc.DeleteApplyPostReq
	2,  // 26: post_grpc.PostService.GetPost:output_type -> post_grpc.Post
	6,  // 27: post_grpc.PostService.ListPosts:output_type -> post_grpc.ListPostsRes
	2,  // 28: post_grpc.PostService.CreatePost:output_type -> post_grpc.Post
	2,  // 29: post_grpc.PostService.UpdatePost:output_type -> post_grpc.Post
	21, // 30: post_grpc.PostService.DeletePost:output_type -> google.protobuf.Empty
	3,  // 31: post_grpc.PostService.GetApplyPost:output_type -> post_grpc.ApplyPost
	13, // 32: post_grpc.PostService.ListApplyPosts:output_type -> post_grpc.ListApplyPostsRes
	15, // 33: post_grpc.PostService.BatchGetApplyPostsByPostIDs:output_type -> post_grpc.BatchGetApplyPostsByPostIDsRes
	3,  // 34: post_grpc.PostService.CreateApplyPost:output_type -> post_grpc.ApplyPost
	21, // 35: post_grpc.PostService.DeleteApplyPost:output_type -> google.protobuf.Empty
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_post_proto_init() }
func file_post_proto_init() {
	if File_post_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_post_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPostsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPostsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePostRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplyPostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplyPostsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplyPostsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetApplyPostsByPostIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetApplyPostsByPostIDsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplyPostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplyPostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPostsReq_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_post_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplyPostsReq_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_post_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_post_proto_goTypes,
		DependencyIndexes: file_post_proto_depIdxs,
		EnumInfos:         file_post_proto_enumTypes,
		MessageInfos:      file_post_proto_msgTypes,
	}.Build()
	File_post_proto = out.File
	file_post_proto_rawDesc = nil
	file_post_proto_goTypes = nil
	file_post_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PostServiceClient interface {
	GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*Post, error)
	ListPosts(ctx context.Context, in *ListPostsReq, opts ...grpc.CallOption) (*ListPostsRes, error)
	CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*Post, error)
	UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*Post, error)
	DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetApplyPost(ctx context.Context, in *GetApplyPostReq, opts ...grpc.CallOption) (*ApplyPost, error)
	ListApplyPosts(ctx context.Context, in *ListApplyPostsReq, opts ...grpc.CallOption) (*ListApplyPostsRes, error)
	BatchGetApplyPostsByPostIDs(ctx context.Context, in *BatchGetApplyPostsByPostIDsReq, opts ...grpc.CallOption) (*BatchGetApplyPostsByPostIDsRes, error)
	CreateApplyPost(ctx context.Context, in *CreateApplyPostReq, opts ...grpc.CallOption) (*ApplyPost, error)
	DeleteApplyPost(ctx context.Context, in *DeleteApplyPostReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListPosts(ctx context.Context, in *ListPostsReq, opts ...grpc.CallOption) (*ListPostsRes, error) {
	out := new(ListPostsRes)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/ListPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetApplyPost(ctx context.Context, in *GetApplyPostReq, opts ...grpc.CallOption) (*ApplyPost, error) {
	out := new(ApplyPost)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/GetApplyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListApplyPosts(ctx context.Context, in *ListApplyPostsReq, opts ...grpc.CallOption) (*ListApplyPostsRes, error) {
	out := new(ListApplyPostsRes)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/ListApplyPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) BatchGetApplyPostsByPostIDs(ctx context.Context, in *BatchGetApplyPostsByPostIDsReq, opts ...grpc.CallOption) (*BatchGetApplyPostsByPostIDsRes, error) {
	out := new(BatchGetApplyPostsByPostIDsRes)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/BatchGetApplyPostsByPostIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CreateApplyPost(ctx context.Context, in *CreateApplyPostReq, opts ...grpc.CallOption) (*ApplyPost, error) {
	out := new(ApplyPost)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/CreateApplyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeleteApplyPost(ctx context.Context, in *DeleteApplyPostReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/post_grpc.PostService/DeleteApplyPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
type PostServiceServer interface {
	GetPost(context.Context, *GetPostReq) (*Post, error)
	ListPosts(context.Context, *ListPostsReq) (*ListPostsRes, error)
	CreatePost(context.Context, *CreatePostReq) (*Post, error)
	UpdatePost(context.Context, *UpdatePostReq) (*Post, error)
	DeletePost(context.Context, *DeletePostReq) (*empty.Empty, error)
	GetApplyPost(context.Context, *GetApplyPostReq) (*ApplyPost, error)
	ListApplyPosts(context.Context, *ListApplyPostsReq) (*ListApplyPostsRes, error)
	BatchGetApplyPostsByPostIDs(context.Context, *BatchGetApplyPostsByPostIDsReq) (*BatchGetApplyPostsByPostIDsRes, error)
	CreateApplyPost(context.Context, *CreateApplyPostReq) (*ApplyPost, error)
	DeleteApplyPost(context.Context, *DeleteApplyPostReq) (*empty.Empty, error)
}

// UnimplementedPostServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (*UnimplementedPostServiceServer) GetPost(context.Context, *GetPostReq) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (*UnimplementedPostServiceServer) ListPosts(context.Context, *ListPostsReq) (*ListPostsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPosts not implemented")
}
func (*UnimplementedPostServiceServer) CreatePost(context.Context, *CreatePostReq) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (*UnimplementedPostServiceServer) UpdatePost(context.Context, *UpdatePostReq) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (*UnimplementedPostServiceServer) DeletePost(context.Context, *DeletePostReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (*UnimplementedPostServiceServer) GetApplyPost(context.Context, *GetApplyPostReq) (*ApplyPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplyPost not implemented")
}
func (*UnimplementedPostServiceServer) ListApplyPosts(context.Context, *ListApplyPostsReq) (*ListApplyPostsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplyPosts not implemented")
}
func (*UnimplementedPostServiceServer) BatchGetApplyPostsByPostIDs(context.Context, *BatchGetApplyPostsByPostIDsReq) (*BatchGetApplyPostsByPostIDsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetApplyPostsByPostIDs not implemented")
}
func (*UnimplementedPostServiceServer) CreateApplyPost(context.Context, *CreateApplyPostReq) (*ApplyPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplyPost not implemented")
}
func (*UnimplementedPostServiceServer) DeleteApplyPost(context.Context, *DeleteApplyPostReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplyPost not implemented")
}

func RegisterPostServiceServer(s *grpc.Server, srv PostServiceServer) {
	s.RegisterService(&_PostService_serviceDesc, srv)
}

func _PostService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPost(ctx, req.(*GetPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/ListPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListPosts(ctx, req.(*ListPostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*CreatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdatePost(ctx, req.(*UpdatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePost(ctx, req.(*DeletePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetApplyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplyPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetApplyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/GetApplyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetApplyPost(ctx, req.(*GetApplyPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListApplyPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplyPostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListApplyPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/ListApplyPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListApplyPosts(ctx, req.(*ListApplyPostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_BatchGetApplyPostsByPostIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetApplyPostsByPostIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).BatchGetApplyPostsByPostIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/BatchGetApplyPostsByPostIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).BatchGetApplyPostsByPostIDs(ctx, req.(*BatchGetApplyPostsByPostIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CreateApplyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplyPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreateApplyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/CreateApplyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreateApplyPost(ctx, req.(*CreateApplyPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeleteApplyPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplyPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeleteApplyPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_grpc.PostService/DeleteApplyPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeleteApplyPost(ctx, req.(*DeleteApplyPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "post_grpc.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPost",
			Handler:    _PostService_GetPost_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _PostService_ListPosts_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostService_DeletePost_Handler,
		},
		{
			MethodName: "GetApplyPost",
			Handler:    _PostService_GetApplyPost_Handler,
		},
		{
			MethodName: "ListApplyPosts",
			Handler:    _PostService_ListApplyPosts_Handler,
		},
		{
			MethodName: "BatchGetApplyPostsByPostIDs",
			Handler:    _PostService_BatchGetApplyPostsByPostIDs_Handler,
		},
		{
			MethodName: "CreateApplyPost",
			Handler:    _PostService_CreateApplyPost_Handler,
		},
		{
			MethodName: "DeleteApplyPost",
			Handler:    _PostService_DeleteApplyPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
