// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: post.proto

package post_grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _post_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Post with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Post) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for UserId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PostValidationError is the validation error returned by Post.Validate if the
// designated constraints aren't met.
type PostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostValidationError) ErrorName() string { return "PostValidationError" }

// Error satisfies the builtin error interface
func (e PostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostValidationError{}

// Validate checks the field values on GetPostByIDReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetPostByIDReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() < 1 {
		return GetPostByIDReqValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// GetPostByIDReqValidationError is the validation error returned by
// GetPostByIDReq.Validate if the designated constraints aren't met.
type GetPostByIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostByIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostByIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostByIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostByIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostByIDReqValidationError) ErrorName() string { return "GetPostByIDReqValidationError" }

// Error satisfies the builtin error interface
func (e GetPostByIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostByIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostByIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostByIDReqValidationError{}

// Validate checks the field values on GetPostByIDRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetPostByIDRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostByIDResValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPostByIDResValidationError is the validation error returned by
// GetPostByIDRes.Validate if the designated constraints aren't met.
type GetPostByIDResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostByIDResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostByIDResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostByIDResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostByIDResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostByIDResValidationError) ErrorName() string { return "GetPostByIDResValidationError" }

// Error satisfies the builtin error interface
func (e GetPostByIDResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostByIDRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostByIDResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostByIDResValidationError{}

// Validate checks the field values on GetListPostsReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetListPostsReq) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetNum(); val < 1 || val > 100 {
		return GetListPostsReqValidationError{
			field:  "Num",
			reason: "value must be inside range [1, 100]",
		}
	}

	return nil
}

// GetListPostsReqValidationError is the validation error returned by
// GetListPostsReq.Validate if the designated constraints aren't met.
type GetListPostsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListPostsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListPostsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListPostsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListPostsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListPostsReqValidationError) ErrorName() string { return "GetListPostsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetListPostsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListPostsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListPostsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListPostsReqValidationError{}

// Validate checks the field values on GetListPostsRes with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetListPostsRes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListPostsResValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetListPostsResValidationError is the validation error returned by
// GetListPostsRes.Validate if the designated constraints aren't met.
type GetListPostsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListPostsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListPostsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListPostsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListPostsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListPostsResValidationError) ErrorName() string { return "GetListPostsResValidationError" }

// Error satisfies the builtin error interface
func (e GetListPostsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListPostsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListPostsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListPostsResValidationError{}

// Validate checks the field values on CreatePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreatePostReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 20 {
		return CreatePostReqValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 2000 {
		return CreatePostReqValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 2000 runes, inclusive",
		}
	}

	if m.GetUserId() < 1 {
		return CreatePostReqValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// CreatePostReqValidationError is the validation error returned by
// CreatePostReq.Validate if the designated constraints aren't met.
type CreatePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostReqValidationError) ErrorName() string { return "CreatePostReqValidationError" }

// Error satisfies the builtin error interface
func (e CreatePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostReqValidationError{}

// Validate checks the field values on CreatePostRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreatePostRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostResValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePostResValidationError is the validation error returned by
// CreatePostRes.Validate if the designated constraints aren't met.
type CreatePostResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostResValidationError) ErrorName() string { return "CreatePostResValidationError" }

// Error satisfies the builtin error interface
func (e CreatePostResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostResValidationError{}

// Validate checks the field values on UpdatePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdatePostReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() < 1 {
		return UpdatePostReqValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 20 {
		return UpdatePostReqValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 2000 {
		return UpdatePostReqValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 2000 runes, inclusive",
		}
	}

	if m.GetUserId() < 1 {
		return UpdatePostReqValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// UpdatePostReqValidationError is the validation error returned by
// UpdatePostReq.Validate if the designated constraints aren't met.
type UpdatePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostReqValidationError) ErrorName() string { return "UpdatePostReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostReqValidationError{}

// Validate checks the field values on UpdatePostRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdatePostRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostResValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePostResValidationError is the validation error returned by
// UpdatePostRes.Validate if the designated constraints aren't met.
type UpdatePostResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostResValidationError) ErrorName() string { return "UpdatePostResValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePostResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostResValidationError{}

// Validate checks the field values on DeletePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeletePostReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() < 1 {
		return DeletePostReqValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetUserId() < 1 {
		return DeletePostReqValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// DeletePostReqValidationError is the validation error returned by
// DeletePostReq.Validate if the designated constraints aren't met.
type DeletePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostReqValidationError) ErrorName() string { return "DeletePostReqValidationError" }

// Error satisfies the builtin error interface
func (e DeletePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostReqValidationError{}

// Validate checks the field values on DeletePostRes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeletePostRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeletePostResValidationError is the validation error returned by
// DeletePostRes.Validate if the designated constraints aren't met.
type DeletePostResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostResValidationError) ErrorName() string { return "DeletePostResValidationError" }

// Error satisfies the builtin error interface
func (e DeletePostResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostResValidationError{}

// Validate checks the field values on ApplyPost with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ApplyPost) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for PostId

	// no validation rules for UserId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyPostValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyPostValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplyPostValidationError is the validation error returned by
// ApplyPost.Validate if the designated constraints aren't met.
type ApplyPostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyPostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyPostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyPostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyPostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyPostValidationError) ErrorName() string { return "ApplyPostValidationError" }

// Error satisfies the builtin error interface
func (e ApplyPostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyPostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyPostValidationError{}

// Validate checks the field values on CreateApplyPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplyPostReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPostId() < 1 {
		return CreateApplyPostReqValidationError{
			field:  "PostId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetUserId() < 1 {
		return CreateApplyPostReqValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// CreateApplyPostReqValidationError is the validation error returned by
// CreateApplyPostReq.Validate if the designated constraints aren't met.
type CreateApplyPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplyPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplyPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplyPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplyPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplyPostReqValidationError) ErrorName() string {
	return "CreateApplyPostReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplyPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplyPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplyPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplyPostReqValidationError{}

// Validate checks the field values on CreateApplyPostRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplyPostRes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplyPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplyPostResValidationError{
				field:  "ApplyPost",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateApplyPostResValidationError is the validation error returned by
// CreateApplyPostRes.Validate if the designated constraints aren't met.
type CreateApplyPostResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplyPostResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplyPostResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplyPostResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplyPostResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplyPostResValidationError) ErrorName() string {
	return "CreateApplyPostResValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplyPostResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplyPostRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplyPostResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplyPostResValidationError{}

// Validate checks the field values on DeleteApplyPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplyPostReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() < 1 {
		return DeleteApplyPostReqValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetUserId() < 1 {
		return DeleteApplyPostReqValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// DeleteApplyPostReqValidationError is the validation error returned by
// DeleteApplyPostReq.Validate if the designated constraints aren't met.
type DeleteApplyPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplyPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplyPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplyPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplyPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplyPostReqValidationError) ErrorName() string {
	return "DeleteApplyPostReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplyPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplyPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplyPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplyPostReqValidationError{}

// Validate checks the field values on DeleteApplyPostRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplyPostRes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeleteApplyPostResValidationError is the validation error returned by
// DeleteApplyPostRes.Validate if the designated constraints aren't met.
type DeleteApplyPostResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplyPostResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplyPostResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplyPostResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplyPostResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplyPostResValidationError) ErrorName() string {
	return "DeleteApplyPostResValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplyPostResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplyPostRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplyPostResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplyPostResValidationError{}
