// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import post_grpc "github.com/ezio1119/fishapp-post/post/controllers/post_grpc"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// PostServiceClient is an autogenerated mock type for the PostServiceClient type
type PostServiceClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) Create(ctx context.Context, in *post_grpc.CreateReq, opts ...grpc.CallOption) (*post_grpc.Post, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *post_grpc.Post
	if rf, ok := ret.Get(0).(func(context.Context, *post_grpc.CreateReq, ...grpc.CallOption) *post_grpc.Post); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post_grpc.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *post_grpc.CreateReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) Delete(ctx context.Context, in *post_grpc.DeleteReq, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wrappers.BoolValue
	if rf, ok := ret.Get(0).(func(context.Context, *post_grpc.DeleteReq, ...grpc.CallOption) *wrappers.BoolValue); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrappers.BoolValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *post_grpc.DeleteReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) GetByID(ctx context.Context, in *post_grpc.ID, opts ...grpc.CallOption) (*post_grpc.Post, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *post_grpc.Post
	if rf, ok := ret.Get(0).(func(context.Context, *post_grpc.ID, ...grpc.CallOption) *post_grpc.Post); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post_grpc.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *post_grpc.ID, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) GetList(ctx context.Context, in *post_grpc.ListReq, opts ...grpc.CallOption) (*post_grpc.ListPost, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *post_grpc.ListPost
	if rf, ok := ret.Get(0).(func(context.Context, *post_grpc.ListReq, ...grpc.CallOption) *post_grpc.ListPost); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post_grpc.ListPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *post_grpc.ListReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *PostServiceClient) Update(ctx context.Context, in *post_grpc.UpdateReq, opts ...grpc.CallOption) (*post_grpc.Post, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *post_grpc.Post
	if rf, ok := ret.Get(0).(func(context.Context, *post_grpc.UpdateReq, ...grpc.CallOption) *post_grpc.Post); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post_grpc.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *post_grpc.UpdateReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
