// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/ezio1119/fishapp-post/models"

import post_grpc "github.com/ezio1119/fishapp-post/post/controllers/post_grpc"

// Presenter is an autogenerated mock type for the Presenter type
type Presenter struct {
	mock.Mock
}

// TransformListPostProto provides a mock function with given fields: listPost
func (_m *Presenter) TransformListPostProto(listPost []*models.Post) (*post_grpc.ListPost, error) {
	ret := _m.Called(listPost)

	var r0 *post_grpc.ListPost
	if rf, ok := ret.Get(0).(func([]*models.Post) *post_grpc.ListPost); ok {
		r0 = rf(listPost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post_grpc.ListPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*models.Post) error); ok {
		r1 = rf(listPost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransformPostProto provides a mock function with given fields: po
func (_m *Presenter) TransformPostProto(po *models.Post) (*post_grpc.Post, error) {
	ret := _m.Called(po)

	var r0 *post_grpc.Post
	if rf, ok := ret.Get(0).(func(*models.Post) *post_grpc.Post); ok {
		r0 = rf(po)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post_grpc.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Post) error); ok {
		r1 = rf(po)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
