// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _event_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for EventType

	// no validation rules for AggregateId

	// no validation rules for AggregateType

	// no validation rules for EventData

	// no validation rules for Channel

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on RoomCreated with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RoomCreated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SagaId

	if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreatedValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RoomCreatedValidationError is the validation error returned by
// RoomCreated.Validate if the designated constraints aren't met.
type RoomCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomCreatedValidationError) ErrorName() string { return "RoomCreatedValidationError" }

// Error satisfies the builtin error interface
func (e RoomCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomCreatedValidationError{}

// Validate checks the field values on CreateRoomFailed with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateRoomFailed) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SagaId

	// no validation rules for Message

	return nil
}

// CreateRoomFailedValidationError is the validation error returned by
// CreateRoomFailed.Validate if the designated constraints aren't met.
type CreateRoomFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomFailedValidationError) ErrorName() string { return "CreateRoomFailedValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoomFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomFailedValidationError{}

// Validate checks the field values on CreateRoom with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateRoom) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SagaId

	if m.GetPostId() < 1 {
		return CreateRoomValidationError{
			field:  "PostId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetUserId() < 1 {
		return CreateRoomValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// CreateRoomValidationError is the validation error returned by
// CreateRoom.Validate if the designated constraints aren't met.
type CreateRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomValidationError) ErrorName() string { return "CreateRoomValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomValidationError{}

// Validate checks the field values on PostDeleted with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PostDeleted) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostDeletedValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PostDeletedValidationError is the validation error returned by
// PostDeleted.Validate if the designated constraints aren't met.
type PostDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDeletedValidationError) ErrorName() string { return "PostDeletedValidationError" }

// Error satisfies the builtin error interface
func (e PostDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDeletedValidationError{}

// Validate checks the field values on PostRejected with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PostRejected) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SagaId

	if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostRejectedValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	return nil
}

// PostRejectedValidationError is the validation error returned by
// PostRejected.Validate if the designated constraints aren't met.
type PostRejectedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostRejectedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostRejectedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostRejectedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostRejectedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostRejectedValidationError) ErrorName() string { return "PostRejectedValidationError" }

// Error satisfies the builtin error interface
func (e PostRejectedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostRejected.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostRejectedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostRejectedValidationError{}

// Validate checks the field values on PostApproved with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PostApproved) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SagaId

	if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostApprovedValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PostApprovedValidationError is the validation error returned by
// PostApproved.Validate if the designated constraints aren't met.
type PostApprovedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostApprovedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostApprovedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostApprovedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostApprovedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostApprovedValidationError) ErrorName() string { return "PostApprovedValidationError" }

// Error satisfies the builtin error interface
func (e PostApprovedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostApproved.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostApprovedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostApprovedValidationError{}

// Validate checks the field values on ApplyPostCreated with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ApplyPostCreated) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplyPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyPostCreatedValidationError{
				field:  "ApplyPost",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplyPostCreatedValidationError is the validation error returned by
// ApplyPostCreated.Validate if the designated constraints aren't met.
type ApplyPostCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyPostCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyPostCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyPostCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyPostCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyPostCreatedValidationError) ErrorName() string { return "ApplyPostCreatedValidationError" }

// Error satisfies the builtin error interface
func (e ApplyPostCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyPostCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyPostCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyPostCreatedValidationError{}

// Validate checks the field values on ApplyPostDeleted with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ApplyPostDeleted) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApplyPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyPostDeletedValidationError{
				field:  "ApplyPost",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplyPostDeletedValidationError is the validation error returned by
// ApplyPostDeleted.Validate if the designated constraints aren't met.
type ApplyPostDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyPostDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyPostDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyPostDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyPostDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyPostDeletedValidationError) ErrorName() string { return "ApplyPostDeletedValidationError" }

// Error satisfies the builtin error interface
func (e ApplyPostDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyPostDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyPostDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyPostDeletedValidationError{}
